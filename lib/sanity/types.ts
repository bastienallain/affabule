/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  startDate?: string;
  endDate?: string;
  startTime?: string;
  endTime?: string;
  isAllDay?: boolean;
  location?: string;
  description?: string;
  fullDescription?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  eventType?: "exhibition" | "opening" | "workshop" | "talk" | "tour" | "conference";
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  relatedArtists?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  capacity?: number;
  price?: string;
  requiresReservation?: boolean;
  bookingUrl?: string;
  featured?: boolean;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Event | Post | Author | Category | BlockContent | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./lib/sanity/queries.ts
// Variable: EVENTS_QUERY
// Query: *[_type == "event" && defined(slug.current)] | order(startDate asc) {  _id,  title,  slug,  startDate,  endDate,  startTime,  endTime,  isAllDay,  location,  description,  eventType,  mainImage,  categories[]->{    _id,    title,    slug  },  relatedArtists[]->{    _id,    name,    slug  },  capacity,  price,  requiresReservation,  bookingUrl,  featured}
export type EVENTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  startDate: string | null;
  endDate: string | null;
  startTime: string | null;
  endTime: string | null;
  isAllDay: boolean | null;
  location: string | null;
  description: string | null;
  eventType: "conference" | "exhibition" | "opening" | "talk" | "tour" | "workshop" | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  relatedArtists: Array<{
    _id: string;
    name: string | null;
    slug: Slug | null;
  }> | null;
  capacity: number | null;
  price: string | null;
  requiresReservation: boolean | null;
  bookingUrl: string | null;
  featured: boolean | null;
}>;
// Variable: FEATURED_EVENTS_QUERY
// Query: *[_type == "event" && featured == true && defined(slug.current)] | order(startDate asc) {  _id,  title,  slug,  startDate,  endDate,  startTime,  endTime,  isAllDay,  location,  description,  eventType,  mainImage,  categories[]->{    _id,    title,    slug  },  relatedArtists[]->{    _id,    name,    slug  },  capacity,  price,  requiresReservation,  bookingUrl}
export type FEATURED_EVENTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  startDate: string | null;
  endDate: string | null;
  startTime: string | null;
  endTime: string | null;
  isAllDay: boolean | null;
  location: string | null;
  description: string | null;
  eventType: "conference" | "exhibition" | "opening" | "talk" | "tour" | "workshop" | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  relatedArtists: Array<{
    _id: string;
    name: string | null;
    slug: Slug | null;
  }> | null;
  capacity: number | null;
  price: string | null;
  requiresReservation: boolean | null;
  bookingUrl: string | null;
}>;
// Variable: EVENT_BY_SLUG_QUERY
// Query: *[_type == "event" && slug.current == $slug][0] {  _id,  title,  slug,  startDate,  endDate,  startTime,  endTime,  isAllDay,  location,  description,  fullDescription,  eventType,  mainImage,  "gallery": gallery[]{    "url": asset->url,    alt  },  categories[]->{    _id,    title,    slug  },  relatedArtists[]->{    _id,    name,    slug  },  capacity,  price,  requiresReservation,  bookingUrl,  featured}
export type EVENT_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  startDate: string | null;
  endDate: string | null;
  startTime: string | null;
  endTime: string | null;
  isAllDay: boolean | null;
  location: string | null;
  description: string | null;
  fullDescription: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  eventType: "conference" | "exhibition" | "opening" | "talk" | "tour" | "workshop" | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  gallery: Array<{
    url: string | null;
    alt: string | null;
  }> | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  relatedArtists: Array<{
    _id: string;
    name: string | null;
    slug: Slug | null;
  }> | null;
  capacity: number | null;
  price: string | null;
  requiresReservation: boolean | null;
  bookingUrl: string | null;
  featured: boolean | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"event\" && defined(slug.current)] | order(startDate asc) {\n  _id,\n  title,\n  slug,\n  startDate,\n  endDate,\n  startTime,\n  endTime,\n  isAllDay,\n  location,\n  description,\n  eventType,\n  mainImage,\n  categories[]->{\n    _id,\n    title,\n    slug\n  },\n  relatedArtists[]->{\n    _id,\n    name,\n    slug\n  },\n  capacity,\n  price,\n  requiresReservation,\n  bookingUrl,\n  featured\n}": EVENTS_QUERYResult;
    "*[_type == \"event\" && featured == true && defined(slug.current)] | order(startDate asc) {\n  _id,\n  title,\n  slug,\n  startDate,\n  endDate,\n  startTime,\n  endTime,\n  isAllDay,\n  location,\n  description,\n  eventType,\n  mainImage,\n  categories[]->{\n    _id,\n    title,\n    slug\n  },\n  relatedArtists[]->{\n    _id,\n    name,\n    slug\n  },\n  capacity,\n  price,\n  requiresReservation,\n  bookingUrl\n}": FEATURED_EVENTS_QUERYResult;
    "*[_type == \"event\" && slug.current == $slug][0] {\n  _id,\n  title,\n  slug,\n  startDate,\n  endDate,\n  startTime,\n  endTime,\n  isAllDay,\n  location,\n  description,\n  fullDescription,\n  eventType,\n  mainImage,\n  \"gallery\": gallery[]{\n    \"url\": asset->url,\n    alt\n  },\n  categories[]->{\n    _id,\n    title,\n    slug\n  },\n  relatedArtists[]->{\n    _id,\n    name,\n    slug\n  },\n  capacity,\n  price,\n  requiresReservation,\n  bookingUrl,\n  featured\n}": EVENT_BY_SLUG_QUERYResult;
  }
}
